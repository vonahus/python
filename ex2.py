"""
1. Создать список и заполнить его элементами различных типов данных.
Реализовать скрипт проверки типа данных каждого элемента.
Использовать функцию type() для проверки типа.
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
"""

# my_list = [1, "a", (1, 2, 3), {'Uno': 1, 'Due': 2, 'Tre': 3}, [1, 2, 3], set([1, 2, 3])]
#
# for element in my_list:
#     print(type(element))

"""
2. Для списка реализовать обмен значений соседних элементов,
т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
При нечетном количестве элементов последний сохранить на своем месте.
Для заполнения списка элементов необходимо использовать функцию input().
"""

# my_list = input("Введите через пробел несколько дней недели: ")
# my_list = my_list.split()
# for position in range(0, len(my_list)-1, 2):
#     my_list[position], my_list[position+1] = my_list[position+1], my_list[position]
#
# print(my_list)

"""
3. Пользователь вводит месяц в виде целого числа от 1 до 12.
Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
Напишите решения через list и через dict.
"""
# через список

# month = int(input("Введите номер месяца: "))
# winter = [12, 1, 2]
# spring = [3, 4, 5]
# summer = [6, 7, 8]
# autumn = [9, 10, 11]
#
# if month in winter:
#     print(f"Месяц {month} относится к зиме")
# elif month in spring:
#     print(f"Месяц {month} относится к весне")
# elif month in summer:
#     print(f"Месяц {month} относится к лету")
# elif month in autumn:
#     print(f"Месяц {month} относится к осени")
# else:
#     print("Месяца не существует")

# через словарь

# seasons_dict = {(12, 1, 2): "Зима", (3, 4, 5): "Весна", (6, 7, 8): "Лето", (9, 10, 11): "Осень"}
# month = int(input("Введите номер месяца: "))
#
# for key, season in seasons_dict.items():
#     i = 0
#     while i < len(key):
#         if month == key[i]:
#             print(season)
#             break
#         i = i + 1

"""
4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
Вывести каждое слово с новой строки.
Строки необходимо пронумеровать.
Если в слово длинное, выводить только первые 10 букв в слове.
"""

# my_string = input("Введите строку из нескольких слов: ")
# my_string = my_string.split()
# for number, word in enumerate(my_string, 1):
#     print(number, word[:10])

"""
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
У пользователя необходимо запрашивать новый элемент рейтинга.
Если в рейтинге существуют элементы с одинаковыми значениями,
то новый элемент с тем же значением должен разместиться после них.
"""

# rating_list = [7, 5, 3, 3, 2]
# new_element = int(input("Введите новый элемент рейтинга: "))
# if new_element <= rating_list[-1]:
#     rating_list.append(new_element)
# else:
#     i = 0
#     while i < len(rating_list):
#         if new_element > rating_list[i]:
#             rating_list.insert(i, new_element)
#             break
#         i = i + 1
# print(rating_list)

"""
6. * Реализовать структуру данных «Товары».
Она должна представлять собой список кортежей.
Каждый кортеж хранит информацию об отдельном товаре.
В кортеже должно быть два элемента — номер товара и словарь с параметрами
(характеристиками товара: название, цена, количество, единица измерения).
Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
Необходимо собрать аналитику о товарах.
Реализовать словарь, в котором каждый ключ — характеристика товара, например название,
а значение — список значений-характеристик, например список названий товаров.
"""

# my_structure = []
# while True:
#      check_inputs = input("Продолжить ввод y/n: ")
#      if check_inputs == "y":
#          my_dict = dict({"Название": input("Введите название товара: "), "Цена": input("Введите цену товара: "),
#                          "Количество": input("Введите кол-во товара: "), "Ед.": input("Введите единицу измерения: ")})
#          my_structure.append((len(my_structure)+1, my_dict))
#      elif check_inputs == "n":
#          break
#      else:
#          check_inputs = input("Продолжить ввод y/n: ")
#
# result_dict = {}
#
# for structure in my_structure:
#     struct_number, struct_info_dict = structure
#     for key, value in struct_info_dict.items():
#         value_list = result_dict.get(key, [])
#         if value not in value_list:
#             value_list.append(value)
#         result_dict[key] = value_list
# print(result_dict)