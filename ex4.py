"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
"""

# from sys import argv
#
# name, productivity, rate, bonus = argv
# print("Название скрипта: ", name)
# print("Выработака в часах: ", productivity)
# print("Ставка в час: ", rate)
# print("Премия: ", bonus)
# print("Зарплата: ", int(productivity) * int(rate) + int(bonus))

"""
2. Представлен список чисел.
Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""

# my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# new_list = [my_list[number] for number in range(1, len(my_list)) if my_list[number - 1] < my_list[number]]
# print(f'Исходный список: {my_list}')
# print(f'Результат: {new_list}')

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""

# print(f'Числа от 20 до 240, кратные 20 или 21: '
#       f'{[number for number in range(20, 241) if number % 20 == 0 or number % 21 == 0]}')

"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""

# my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# result_list = [number for number in my_list if my_list.count(number) == 1]
# print(f'Исходный список: {my_list}')
# print(f'Результирующий список: {result_list}')

"""
5. Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""

# from functools import reduce
#
# my_list = reduce(lambda a, b: a*b, [number for number in range(100, 1001, 2)])
# print(my_list)

"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным.
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""

# from itertools import count
#
# for element in count(3):
#     if element > 10:
#         break
#     else:
#         print(element)

# from itertools import cycle
#
# my_list = ["Зима", "Весна", "Лето", "Осень"]
# counter = 0
# for element in cycle(my_list):
#     print(element)
#     counter += 1
#     if counter > 10:
#         break

"""
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор.
Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа,
а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n.
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""

# from itertools import count
#
# def fact(n):
#     my_fact = 1
#     for a in count(1):
#         if a <= n:
#             my_fact *= a
#             yield my_fact
#         else:
#             break
#
#
# for el in fact(5):
#     print(el)
